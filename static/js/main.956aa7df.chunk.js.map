{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","loading","quoteData","backgroundImages","index","quoteBoxStyles","position","marginLeft","marginRight","marginTop","width","backgroundColor","borderRadius","borderStyle","borderColor","padding","componentDidMount","bind","getData","handleClick","this","i","setState","document","body","style","backgroundImage","fetch","response","json","newData","console","log","newQuote","quote","setBackground","inputStyle","color","fontFamily","fontStyle","fontWeight","fontSize","quoteForLengthTest","length","id","className","author","onClick","icon","faRedo","size","class","href","data-size","faTwitter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.956aa7df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState, componentDidMount } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faRedo } from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      quoteData: \"\",\n      backgroundImages: [\n        \"https://freecodecampassets.s3.us-east-2.amazonaws.com/piotr-chrobot-6oUsyeYXgTg-unsplash.jpg\",\n        \"https://freecodecampassets.s3.us-east-2.amazonaws.com/jj-jordan-S3-kHziSt00-unsplash.jpg\",\n        \"https://freecodecampassets.s3.us-east-2.amazonaws.com/federico-beccari-ahi73ZN5P0Y-unsplash.jpg\",\n        \"https://freecodecampassets.s3.us-east-2.amazonaws.com/joey-kyber-vXtX07KVcE8-unsplash.jpg\"\n      ],\n      index: 0,\n      quoteBoxStyles: [\n        // red and gray\n        {\n          position: \"relative\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"15%\",\n          width: \"50%\",\n\n          backgroundColor: \"rgba(28, 26, 24, 0.9)\",\n          borderRadius: \"20%\",\n          borderStyle: \"solid\",\n          borderColor: \"#d10000\",\n\n          padding: \"3%\"\n        },\n        //blue and orange\n        {\n          position: \"relative\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"15%\",\n          width: \"50%\",\n\n          backgroundColor: \"rgba(36, 26, 70, 0.9)\",\n          borderRadius: \"20%\",\n          borderStyle: \"solid\",\n          borderColor: \"#ff2f05\",\n\n          padding: \"3%\"\n        },\n        //black and purple\n        {\n          position: \"relative\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"15%\",\n          width: \"50%\",\n\n          backgroundColor: \"rgba(28, 26, 24, 0.9)\",\n          borderRadius: \"20%\",\n          borderStyle: \"solid\",\n          borderColor: \"#9f21ff\",\n\n          padding: \"3%\"\n        },\n        //silver and turquoise\n        {\n          position: \"relative\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"15%\",\n          width: \"50%\",\n\n          backgroundColor: \"rgba(28, 26, 24, 0.9)\",\n          borderRadius: \"20%\",\n          borderStyle: \"solid\",\n          borderColor: \"#fffef5\",\n\n          padding: \"3%\"\n        }\n      ]\n    };\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.getData = this.getData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //initial call of API upon mounting\n  async componentDidMount() {\n    this.getData();\n  }\n\n  //function sets the index when id=\"new-quote\" is clicked\n  handleClick() {\n    let i = this.state.index < 3 ? (this.state.index += 1) : 0;\n    this.setState({ index: i });\n  }\n\n  // function setting the background image of the body in ReactDOM dynamically - also sets the styling of id=\"quote-box\"\n  setBackground() {\n    document.body.style.backgroundImage =\n      \"url(\" + this.state.backgroundImages[this.state.index] + \")\";\n\n    this.handleClick();\n  }\n\n  // function that is called and assigns a new quote to the global state when \"new-quote\" is clicked\n  async getData() {\n    const url = \"http://quotes.stormconsultancy.co.uk/random.json\";\n    const response = await fetch(url);\n    var newData = await response.json();\n    console.log(newData);\n    this.setState({ loading: false, quoteData: newData });\n    this.newQuote = this.state.quoteData.quote;\n    this.setBackground();\n  }\n\n  render() {\n    //style block in which font size changes depending on the length of a quote\n    let inputStyle = {\n      position: \"relative\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      marginTop: \"0%\",\n\n      color: \"white\",\n      fontFamily: \"Shadows Into Light, cursive\",\n      fontStyle: \"normal\",\n      fontWeight: 300,\n      fontSize: 27\n    };\n\n    let quoteForLengthTest = this.state.quoteData.quote;\n\n    if (!this.state.loading) {\n      if (quoteForLengthTest.length > 230) {\n        inputStyle = {\n          position: \"relative\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"0%\",\n          color: \"white\",\n          fontFamily: \"Shadows Into Light, cursive\",\n\n          fontStyle: \"normal\",\n          fontWeight: 300,\n          fontSize: 23\n        };\n      }\n    }\n\n    //dynamic style block that changes each time API is called\n\n    // conditions handling the API call\n    if (this.state.loading) {\n      return <div>\"loading...\"</div>;\n    } else {\n      return (\n        <div\n          id=\"quote-box\"\n          className=\"App\"\n          style={this.state.quoteBoxStyles[this.state.index]}\n        >\n          <div id=\"text\" style={inputStyle}>\n            \"{this.state.quoteData.quote}\"\n          </div>\n          <div id=\"author\">- {this.state.quoteData.author}</div>\n          <br></br>\n          <div id=\"loadCheck\">{this.state.loading}</div>\n\n          {/* button which appears as refresh icon that calls the API for a new quote */}\n          <button id=\"new-quote\" className=\"buttonClass\" onClick={this.getData}>\n            <FontAwesomeIcon icon={faRedo} size=\"3x\"></FontAwesomeIcon>\n          </button>\n\n          {/* anchor tag that is rendered as a Tweet icon which loads quote into Twitter tweet box*/}\n          <a\n            class=\"tweet-quote\"\n            href={`https://twitter.com/intent/tweet?text=${this.state.quoteData.quote}`}\n            data-size=\"large\"\n          >\n            <FontAwesomeIcon\n              icon={faTwitter}\n              size=\"2x\"\n              color=\"white\"\n              style={{\n                backgroundColor: \"none\",\n                width: \"10%\",\n                marginLeft: \"-35%\"\n              }}\n            ></FontAwesomeIcon>\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}